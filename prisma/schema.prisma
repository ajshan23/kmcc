generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Airport {
  id        Int     @id @default(autoincrement())
  iataCode  String  @unique @map("iataCode")
  name      String
  country   String
  fromTrips Travel[] @relation("FromTrips")
  toTrips   Travel[] @relation("ToTrips")
  
  @@map("airport")
}

model Banner {
  id        Int      @id @default(autoincrement())
  image     Bytes
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("banners")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  description String?
  pdfData     Bytes    @map("pdf_data")
  coverImage  Bytes    @map("cover_image")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("book")
}

model ConstitutionCommittee {
  id          Int                       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime                  @default(now()) @map("created_at")
  updatedAt   DateTime                  @updatedAt @map("updated_at")
  members     ConstitutionCommitteeMember[]
  
  @@map("constitutioncommittee")
}

model ConstitutionCommitteeMember {
  id          Int                 @id @default(autoincrement())
  name        String
  position    String
  image       Bytes?
  committeeId Int                 @map("committee_id")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  committee   ConstitutionCommittee @relation(fields: [committeeId], references: [id])
  
  @@map("constitutioncommitteemember")
}

model ContactInfo {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique @map("user_id")
  phone   String?
  address String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("contact_infos")
}

model Event {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  eventDate   DateTime            @map("event_date")
  place       String
  timing      String
  highlights  Json
  eventType   String              @map("event_type")
  image       Bytes?
  isFinished  Boolean             @default(false) @map("is_finished")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  registrations EventRegistration[]
  
  @@map("event")
}

model EventRegistration {
  id         Int      @id @default(autoincrement())
  eventId    Int      @map("event_id")
  userId     Int      @map("user_id")
  isAttended Boolean  @default(false) @map("is_attended")
  createdAt  DateTime @default(now()) @map("created_at")
  
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId])
  @@map("eventregistration")
}

model ExclusiveMember {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  image     Bytes?
  priority  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("exclusivemember")
}

model GoldLot {
  id          Int           @id @default(autoincrement())
  programId   Int           @map("program_id")
  userId      Int           @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  program     GoldProgram   @relation(fields: [programId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  payments    GoldPayment[]
  winners     GoldWinner[]
  
  @@map("goldlot")
}

model GoldPayment {
  id        Int       @id @default(autoincrement())
  lotId     Int       @map("lot_id")
  year      Int
  month     Int
  isPaid    Boolean   @default(false) @map("is_paid")
  paidAt    DateTime?
  createdAt DateTime  @default(now()) @map("created_at")
  lot       GoldLot   @relation(fields: [lotId], references: [id])
  
  @@unique([lotId, year, month])
  @@map("goldpayment")
}

model GoldProgram {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime     @default(now()) @map("start_date")
  endDate     DateTime?    @map("end_date")
  isActive    Boolean      @default(false) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  lots        GoldLot[]
  winners     GoldWinner[]
  
  @@map("goldprogram")
}

model GoldWinner {
  id          Int         @id @default(autoincrement())
  programId   Int         @map("program_id")
  lotId       Int         @map("lot_id")
  year        Int
  month       Int
  prizeAmount Float?      @map("prize_amount")
  createdAt   DateTime    @default(now()) @map("created_at")
  lot         GoldLot     @relation(fields: [lotId], references: [id])
  program     GoldProgram @relation(fields: [programId], references: [id])
  
  @@map("goldwinner")
}

model InvestmentDeposit {
  id                 Int                @id @default(autoincrement())
  investmentId       Int                @map("investment_id")
  amount             Float
  depositDate        DateTime           @default(now()) @map("deposit_date")
  notes              String?
  createdAt          DateTime           @default(now()) @map("created_at")
  investment         LongTermInvestment @relation(fields: [investmentId], references: [id])
  
  @@map("investmentdeposit")
}

model Job {
  id                  Int              @id @default(autoincrement())
  companyName         String           @map("company_name")
  logo                Bytes
  position            String
  jobMode             String           @map("job_mode")
  salary              Int
  place               String
  jobDescription      String           @db.Text @map("job_description")
  keyResponsibilities Json             @map("key_responsibilities")
  requirements        Json
  benefits            Json
  isClosed            Boolean          @default(false) @map("is_closed")
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  applications        JobApplication[]
  
  @@map("job")
}

model JobApplication {
  id        Int      @id @default(autoincrement())
  jobId     Int      @map("job_id")
  fullName  String   @map("full_name")
  email     String
  phone     String
  resume    Bytes
  createdAt DateTime @default(now()) @map("created_at")
  job       Job      @relation(fields: [jobId], references: [id])
  
  @@map("jobapplication")
}

model LongTermInvestment {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @map("user_id")
  startDate         DateTime            @default(now()) @map("start_date")
  endDate           DateTime?           @map("end_date")
  isActive          Boolean             @default(true) @map("is_active")
  totalDeposited    Float               @default(0) @map("total_deposited")
  totalProfit       Float               @default(0) @map("total_profit")
  profitDistributed Float               @default(0) @map("profit_distributed")
  profitPending     Float               @default(0) @map("profit_pending")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  deposits          InvestmentDeposit[]
  user              User                @relation(fields: [userId], references: [id])
  payouts           ProfitPayout[]
  
  @@unique([userId, isActive])
  @@map("longterminvestment")
}

model Membership {
  id          Int     @id @default(autoincrement())
  memberId    String  @unique @map("member_id")
  iqamaNumber String  @unique @map("iqama_number")
  name        String
  phoneNumber String? @map("phone_number")
  status      String
  areaName    String? @map("area_name")
  
  @@map("memberships")
}

model News {
  id          Int      @id @default(autoincrement())
  type        String
  heading     String
  author      String
  body        String   @db.Text
  image       Bytes
  authorImage Bytes    @map("author_image")
  timeToRead  String   @map("time_to_read")
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@map("news")
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  data      Json?
  isRead    Boolean  @default(false) @map("is_read")
  userId    Int?     @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification")
}

model Profile {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique @map("user_id")
  occupation   String?
  employer     String?
  place        String?
  dateOfBirth  DateTime? @map("date_of_birth")
  bloodGroup   String?   @map("blood_group")
  kmccPosition String?   @map("kmcc_position")
  address      String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profile")
}

model ProfitPayout {
  id                 Int                @id @default(autoincrement())
  investmentId       Int                @map("investment_id")
  amount             Float
  payoutDate         DateTime           @default(now()) @map("payout_date")
  notes              String?
  createdAt          DateTime           @default(now()) @map("created_at")
  investment         LongTermInvestment @relation(fields: [investmentId], references: [id])
  
  @@map("profitpayout")
}

model Question {
  id               Int                @id @default(autoincrement())
  surveyId         Int                @map("survey_id")
  text             String
  type             String
  options          Json?
  image            Bytes
  required         Boolean            @default(true)
  position         Int                @default(0)
  survey           Survey             @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  responses        Response[]
  surveyAnswers    UserSurveyAnswer[]
  
  @@map("question")
}

model Response {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  questionId Int      @map("question_id")
  answer     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("response")
}

model Service {
  id            Int      @id @default(autoincrement())
  title         String
  location      String
  startingTime  String   @map("starting_time")
  stoppingTime  String   @map("stopping_time")
  availableDays String   @map("available_days")
  image         Bytes?
  phoneNumber   String   @map("phone_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@map("services")
}

model SubWing {
  id              Int           @id @default(autoincrement())
  name            String
  icon            Bytes?
  backgroundColor String        @default("#FFFFFF")
  mainColor       String        @default("#000000")
  description     String?
  members         SubWingMember[]
  
  @@map("subwing")
}

model SubWingMember {
  id        Int     @id @default(autoincrement())
  name      String
  position  String
  image     Bytes?
  subWingId Int     @map("sub_wing_id")
  subWing   SubWing @relation(fields: [subWingId], references: [id])
  
  @@map("subwingmember")
}

model Survey {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  isActive           Boolean              @default(true) @map("is_active")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  questions          Question[]
  userSurveys       UserSurvey[]
  userSurveyAnswers UserSurveyAnswer[]
  userProgresses    UserSurveyProgress[]
  
  @@map("survey")
}

model Travel {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  fromAirportId Int      @map("from_airport_id")
  toAirportId   Int      @map("to_airport_id")
  travelDate    DateTime @map("travel_date")
  travelTime    String   @map("travel_time")
  status        String
  createdAt     DateTime @default(now()) @map("created_at")
  
  fromAirport Airport @relation("FromTrips", fields: [fromAirportId], references: [id])
  toAirport   Airport @relation("ToTrips", fields: [toAirportId], references: [id])
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("travel")
}

model User {
  id                Int                     @id @default(autoincrement())
  name              String
  email             String?                 @unique
  gender            String?
  memberId          String                  @unique @map("member_id")
  iqamaNumber       String                  @unique @map("iqama_number")
  phoneNumber       String                  @unique @map("phone_number")
  profileImage      Bytes?                  @map("profile_image")
  password          String
  areaName          String?                 @map("area_name")
  fcmToken          String?                 @map("fcm_token")
  isAdmin           Boolean                 @default(false) @map("is_admin")
  isSuperAdmin      Boolean                 @default(false) @map("is_super_admin")
  isSurveyCompleted Boolean                 @default(false) @map("is_survey_completed")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")
  
  // Relations
  contactInfo       ContactInfo?
  eventRegistrations EventRegistration[]
  goldLots          GoldLot[]
  investments       LongTermInvestment[]
  notifications     Notification[]
  profile           Profile?
  responses         Response[]
  travels           Travel[]
  notificationTokens UserNotificationToken[]
  surveys           UserSurvey[]
  surveyAnswers     UserSurveyAnswer[]
  surveyProgresses  UserSurveyProgress[]
  
  @@map("user")
}

model UserNotificationToken {
  id     Int    @id @default(autoincrement())
  userId Int    @map("user_id")
  token  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usernotificationtoken")
}

model UserSurvey {
  id          Int     @id @default(autoincrement())
  userId      Int     @map("user_id")
  surveyId    Int     @map("survey_id")
  isCompleted Boolean @default(false) @map("is_completed")
  survey      Survey  @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, surveyId])
  @@map("usersurvey")
}

model UserSurveyAnswer {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  surveyId   Int      @map("survey_id")
  questionId Int      @map("question_id")
  answer     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  survey     Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, questionId])
  @@map("usersurveyanswer")
}

model UserSurveyProgress {
  id             Int     @id @default(autoincrement())
  userId         Int     @map("user_id")
  surveyId       Int     @map("survey_id")
  completed      Boolean @default(false)
  lastQuestionId Int?    @map("last_question_id")
  survey         Survey  @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usersurveyprogress")
}